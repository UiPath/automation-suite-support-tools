"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3031],{3113:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>t});var o=s(5893),c=s(1151);const l={sidebar_position:2},r="CEPH Rebuilding OSD",i={id:"ceph/ceph-rebuilding-osd",title:"CEPH Rebuilding OSD",description:"This is not official documentation for AutomationSuite",source:"@site/docs/ceph/ceph-rebuilding-osd.md",sourceDirName:"ceph",slug:"/ceph/ceph-rebuilding-osd",permalink:"/automation-suite-support-tools/docs/ceph/ceph-rebuilding-osd",draft:!1,unlisted:!1,editUrl:"https://uipath.github.com/UiPath/automation-suite-support-tools/edit/master/docs/docs/ceph/ceph-rebuilding-osd.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CEPH Troubleshooting",permalink:"/automation-suite-support-tools/docs/ceph/troubleshooting-ceph"},next:{title:"CEPH OnDemand Backup",permalink:"/automation-suite-support-tools/docs/ceph/ceph-ondemand-backup"}},a={},t=[];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"ceph-rebuilding-osd",children:"CEPH Rebuilding OSD"}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"danger",children:(0,o.jsx)(n.p,{children:"This is not official documentation for AutomationSuite"})}),"\n",(0,o.jsx)(n.p,{children:"ceph OSD may get corrupted due to underlying hardware issue, hitting a edge case in ceph code path due a system event etc. A corrupted OSD may leave cluster in warning state as data is not fully replicated according the config provided."}),"\n",(0,o.jsx)(n.p,{children:"In such case , any of the other healthy OSD can be used to sync the data into re-created OSD. Procedure to rebuild an PV backed OSD"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Disable self-heal for fabric-installer and rook application"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'kubectl -n argocd patch application fabric-installer --type=json -p \'[{"op":"replace","path":"/spec/syncPolicy/automated/selfHeal","value":false}]\'\n\nkubectl -n argocd patch application rook-ceph-operator --type=json -p \'[{"op":"replace","path":"/spec/syncPolicy/automated/selfHeal","value":false}]\'\n\nkubectl -n argocd patch application rook-ceph-object-store --type=json -p \'[{"op":"replace","path":"/spec/syncPolicy/automated/selfHeal","value":false}]\'\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Scale down operator"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph scale --replicas=0 deploy/rook-ceph-opeator\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Get PVC name corresponding to crashing/corrupted OSD"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph get deploy  <CORRUPTED_OSD_DEPLOYMENT> --show-labels\ne.g\nkubectl -n rook-ceph get deploy  rook-ceph-osd-0 --show-labels\n# Look for labels that starts with set1 , this is the PVC name we need to delete\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Scale down crashing/corrupted OSD"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph scale --replicas=0 deploy <CORRUPTED_OSD_DEPLOYMENT>\ne.g\nkubectl -n rook-ceph scale --replicas=0 deploy rook-ceph-osd-0\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Delete crashing/corrupted OSD PVC"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph delete pvc <PVC_NAME>\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Delete Crashing OSD deployment"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph delete deploy <CORRUPTED_OSD_DEPLOYMENT>\ne.g\nkubectl -n rook-ceph delete deploy rook-ceph-osd-0\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Start rook operator"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph scale --replicas=1 deploy/rook-ceph-opeator\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Wait until new replacement OSD is created"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add step to remove old OSD from ceph cluster"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Mark OSD out"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph exec deploy/rook-ceph-tools -- ceph osd out osd.<ID>\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Purge OSD"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph exec deploy/rook-ceph-tools -- ceph osd purge osd.<ID> --force --yes-i-really-mean-it\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"Tip",type:"tip",children:(0,o.jsx)(n.p,{children:"The procedure is almost same for raw device backed OSD except for deletion of PVC , we need to cleanup the raw device. To find the raw device being used by corrupted OSD"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Get OSD ID"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl -n rook-ceph get deploy  <CORRUPTED_OSD_DEPLOYMENT> --show-labels\ne.g\nkubectl -n rook-ceph get deploy  rook-ceph-osd-0 --show-labels\n# Look for `ceph-osd-id` (In this case it is 0)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Find OSD uuid"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'find /var/lib/rook/ -name "whoami" | xargs -I{} bash -c \'[[ "$(cat {})" -eq <OSD_ID> ]] && ls -l  "$(dirname {})"/block\'\ne.g\nfind /var/lib/rook/ -name "whoami" | xargs -I{} bash -c \'[[ "$(cat {})" -eq 0 ]] && ls -l  "$(dirname {})"/block\'\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Find block device name"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"lsblk | grep '<FIRST_UUID_SECTION_FROM_LINKED_DEVICE>' -B1\ne.g\nlsblk | grep '7bb96604' -B1\n"})}),"\n",(0,o.jsx)(n.p,{children:"So the device name is sde"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"CephDeviceName",src:s(9045).Z+"",width:"3084",height:"652"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Clean up block device"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sgdisk --zap-all <DEVICE_PATH>\ndd if=/dev/zero of=\"DEVICE_PATH\" bs=1M count=100 oflag=direct,dsync\nblkdiscard <DEVICE_PATH>\nls /dev/mapper/ceph-* | grep '<FIRST_UUID_SECTION_FROM_LINKED_DEVICE>' | xargs -I% -- dmsetup remove % \nrm -rf /dev/ceph-<FIRST_UUID_SECTION_FROM_LINKED_DEVICE>-*\n\ne.g\nsgdisk --zap-all /dev/sde\ndd if=/dev/zero of=/dev/sde bs=1M count=100 oflag=direct,dsync\nblkdiscard /dev/sde\nls /dev/mapper/ceph-* | grep '7bb96604' | xargs -I% -- dmsetup remove %\nrm -rf /dev/ceph-7bb96604-*\n"})})]})}function p(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},9045:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/ceph-devicename-e9b6c92bc2db88042fabedf39a509a9d.png"},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>r});var o=s(7294);const c={},l=o.createContext(c);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);