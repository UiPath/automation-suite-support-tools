"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1836],{5633:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=i(5893),l=i(1151);const r={sidebar_position:1},s="Longhorn Troubleshooting",a={id:"longhorn/troubleshooting-volume-attachment-issues",title:"Longhorn Troubleshooting",description:"This is not official documentation for AutomationSuite",source:"@site/docs/longhorn/troubleshooting-volume-attachment-issues.md",sourceDirName:"longhorn",slug:"/longhorn/troubleshooting-volume-attachment-issues",permalink:"/automation-suite-support-tools/docs/longhorn/troubleshooting-volume-attachment-issues",draft:!1,unlisted:!1,editUrl:"https://uipath.github.com/UiPath/automation-suite-support-tools/edit/master/docs/docs/longhorn/troubleshooting-volume-attachment-issues.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Longhorn Troubleshooting",permalink:"/automation-suite-support-tools/docs/category/longhorn-troubleshooting"},next:{title:"Ceph Troubleshooting",permalink:"/automation-suite-support-tools/docs/category/ceph-troubleshooting"}},t={},c=[{value:"1.1 Missing volume.meta file from replica directory",id:"11-missing-volumemeta-file-from-replica-directory",level:2},{value:"1.1.1 Finding replica directory",id:"111-finding-replica-directory",level:3},{value:"1.1.2 Recreating <code>volume.meta</code> file",id:"112-recreating-volumemeta-file",level:3},{value:"1.2 Missing metadata for img files",id:"12-missing-metadata-for-img-files",level:2},{value:"1.2.1 To recreate volume-head-xxx.img.meta file",id:"121-to-recreate-volume-head-xxximgmeta-file",level:3},{value:"1.2.2 To recreate volume-snap-xxx.img.meta file",id:"122-to-recreate-volume-snap-xxximgmeta-file",level:3},{value:"1.3 Mismatch in PVC size",id:"13-mismatch-in-pvc-size",level:2},{value:"1.4 All replicas are faulted",id:"14-all-replicas-are-faulted",level:2},{value:"1.5 Engine image is missing",id:"15-engine-image-is-missing",level:2},{value:"1.6 Corrupted meta files from replica directory",id:"16-corrupted-meta-files-from-replica-directory",level:2},{value:"1.7 Pod fails to come up after node reboot due to filesystem corruption",id:"17-pod-fails-to-come-up-after-node-reboot-due-to-filesystem-corruption",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"longhorn-troubleshooting",children:"Longhorn Troubleshooting"}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"danger",children:(0,o.jsx)(n.p,{children:"This is not official documentation for AutomationSuite"})}),"\n",(0,o.jsx)(n.p,{children:"If longhorn volume is not able to attach/mount to node then pod will remain in ContainerCreating  or Init state and kubectl get events -n POD_NS will have below events"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"-monitoring-alertmanager-db]: timed out waiting for the condition\n67s         Warning   FailedMount              pod/alertmanager-rancher-monitoring-alertmanager-1                                                                     Unable to attach or mount volumes: unmounted volumes=[alertmanager-rancher-monitoring-alertmanager-db], unattached volumes=[kube-api-access-smb9d config-volume tls-assets alertmanager-rancher-monitoring-alertmanager-db secret-alertmanager-tls-secret]: timed out waiting for the condition\n"})}),"\n",(0,o.jsx)(n.p,{children:"Longhorn volume mount may fail with following reasons,"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Missing volume.meta file from replica directory"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Missing metadata for img file"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Mismatch in PVC size"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"All replicas are faulted"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Engine image is missing"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Corrupted meta files from replica directory"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Pod fails to come up after node reboot due to filesystem corruption"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"TGT not able to login to volume"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Failure in replica scheduling"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"11-missing-volumemeta-file-from-replica-directory",children:"1.1 Missing volume.meta file from replica directory"}),"\n",(0,o.jsx)(n.p,{children:"To identify, if volume mount is failing because of missing volume.meta file, check logs of longhorn-manager pod using below command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'kubectl  logs -l app=longhorn-manager  -n longhorn-system  -c longhorn-manager --prefix=true  --tail=-1  |grep "Failed to read info in replica directory" | grep <PV NAME>\n'})}),"\n",(0,o.jsx)(n.p,{children:"For example, if pod is not able to mount volume pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6, then command will be:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'[root@server0 ~]# kubectl  logs -l app=longhorn-manager  -n longhorn-system  -c longhorn-manager --prefix=true  --tail=-1  |grep "Failed to read info in replica directory" | grep pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6\n[pod/longhorn-manager-7gdqg/longhorn-manager] time="2023-07-10T11:41:10Z" level=warning msg="pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-r-ebc73f6b: time=\\"2023-07-10T11:01:41Z\\" level=error msg=\\"Failed to read info in replica directory /host/datadisk/replicas/pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a: EOF\\""\n[pod/longhorn-manager-7gdqg/longhorn-manager] time="2023-07-10T11:41:10Z" level=warning msg="pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-r-ebc73f6b: time=\\"2023-07-10T11:01:42Z\\" level=error msg=\\"Failed to read info in replica directory /host/datadisk/replicas/pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a: EOF\\""\n'})}),"\n",(0,o.jsx)(n.h3,{id:"111-finding-replica-directory",children:"1.1.1 Finding replica directory"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Once, issue is confirmed using above command, scale down workload pods which is consuming this PV."}),"\n",(0,o.jsx)(n.li,{children:"Post scale-down, We need to check longhorn replica directory to identify which meta file is missing."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To identify which server node is having longhorn replica directory, run below command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:' kubectl  get replicas.longhorn.io -n longhorn-system -l  longhornvolume=<PV_NAME>  -o custom-columns="NAME":.metadata.name,"STATE":.status.currentState,"NODE":.spec.nodeID,"DIRECTORY":.spec.dataDirectoryName\n'})}),"\n",(0,o.jsx)(n.p,{children:"For our above example, it will be:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'[root@server1 ~]# kubectl  get replicas.longhorn.io -n longhorn-system -l  longhornvolume=pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6  -o custom-columns="NAME":.metadata.name,"STATE":.status.currentState,"NODE":.spec.nodeID,"DIRECTORY":.spec.dataDirectoryName\nNAME                                                  STATE     NODE      DIRECTORY\npvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-r-ebc73f6b   running   server2   pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a\n'})}),"\n",(0,o.jsxs)(n.p,{children:["From above output, replica directory is ",(0,o.jsx)(n.code,{children:"pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a"})," and located on node server2."]}),"\n",(0,o.jsxs)(n.p,{children:["Once replica node is identified, login to replica node and run ",(0,o.jsx)(n.code,{children:"ls"})," command against replica directory under ",(0,o.jsx)(n.code,{children:"/datadisk/replicas"})," to identify missing or empty file."]}),"\n",(0,o.jsxs)(n.p,{children:["For our above example, complete directory name will be ",(0,o.jsx)(n.code,{children:"/datadisk/replicas/pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a"})," and sample output of ls command will be as per below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[root@server2 ~]# ls -l /datadisk/replicas/pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a\ntotal 102368\n-rw-------. 1 root root       4096 Jul 10 11:00 revision.counter\n-rw-r--r--. 1 root root 2147483648 Jul 10 11:00 volume-head-006.img\n-rw-r--r--. 1 root root        187 Jul 10 10:10 volume-head-006.img.meta\n-rw-r--r--. 1 root root 2147483648 Jul 10 10:10 volume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img\n-rw-r--r--. 1 root root        197 Jul 10 10:10 volume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img.meta\n-rw-r--r--. 1 root root          0 Jul 10 11:01 volume.meta\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"112-recreating-volumemeta-file",children:["1.1.2 Recreating ",(0,o.jsx)(n.code,{children:"volume.meta"})," file"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["From above output, ",(0,o.jsx)(n.code,{children:"volume.meta"})," file is empty"]}),"\n",(0,o.jsxs)(n.li,{children:["Use below steps to recreate ",(0,o.jsx)(n.code,{children:"volume.meta"})," file"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Format of ",(0,o.jsx)(n.code,{children:"volume.meta"})," file in pretty-json is as below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'{\n  "Size": 2147483648,\n  "Head": "volume-head-009.img",\n  "Dirty": true,\n  "Rebuilding": false,\n  "Error": "",\n  "Parent": "volume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img",\n  "SectorSize": 512,\n  "BackingFilePath": ""\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["All meta files will be in compacted format. You can use ",(0,o.jsx)(n.code,{children:"jq -c"})," to generate compacted format."]}),"\n",(0,o.jsx)(n.p,{children:"where,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Size is volume/PV size in Bytes. To get size of PV, run ",(0,o.jsx)(n.code,{children:"kubectl get <PV_NAME> -o jsonpath='{.spec.capacity.storage}'"})," and convert it into bytes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Head"})," is volume head file name. Format of head file name is ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Dirty"})," represent volume state"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Rebuilding"})," defines it volume requires rebuilding or not"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Error"})," represent any error in volume"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Parent"})," represent the latest snapshot name. To get latest snapshot name, run ",(0,o.jsx)(n.code,{children:"ls  -1rth volume-snap*.img | tail -1"})," in replica directory."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"SectorSize"})," represent volume sector size, it should be always 512."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"BackingFilePath"})," represent backing file for replica. It is internal to replica and should be empty."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Now, to construct ",(0,o.jsx)(n.code,{children:"volume.meta"})," file for example volume ",(0,o.jsx)(n.code,{children:"pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a"})," We need Size, Head, Parent and SectorSize information."]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["To get size, run command ",(0,o.jsx)(n.code,{children:"kubectl get <PV_NAME> -o jsonpath='{.spec.capacity.storage}'"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[root@server1 ~]# kubectl get pv pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6 -o jsonpath='{.spec.capacity.storage}'\n2Gi\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Since size if Gi, multiply it with 1024",(0,o.jsx)(n.em,{children:"1024"}),"1024. So final size will be 2147483648."]}),"\n",(0,o.jsx)(n.li,{children:"If PV size is in Mi, multiply it with 1024*1024."}),"\n",(0,o.jsx)(n.li,{children:"If it is in Ki, multiple it with 1024."}),"\n"]}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["To get ",(0,o.jsx)(n.code,{children:"Head"})," file, run ",(0,o.jsx)(n.code,{children:"ls volume-head-*.img"})," in replica directory. There will be only one head file in directory."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[root@server2 pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a]# ls volume-head-*.img\nvolume-head-006.img\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsxs)(n.li,{children:["To get Parent snapshot, run ",(0,o.jsx)(n.code,{children:"ls -1rth volume-snap*.img | tail -1"})," in replica directory."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[root@server2 pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-31f5410a]# ls -1rth volume-snap*.img | tail -1\nvolume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["For ",(0,o.jsx)(n.code,{children:"SectoreSize"}),", it will be default to 512. To verify, check other ",(0,o.jsx)(n.code,{children:"volume.meta"})," file under ",(0,o.jsx)(n.code,{children:"/datadisk/replica"})," directory."]}),"\n",(0,o.jsxs)(n.p,{children:["Using above information, ",(0,o.jsx)(n.code,{children:"volume.meta"})," file for our example volume will be,"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'{\n  "Size": 2147483648,\n  "Head": "volume-head-006.img",\n  "Dirty": false,\n  "Rebuilding": false,\n  "Error": "",\n  "Parent": "volume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img",\n  "SectorSize": 512,\n  "BackingFilePath": ""\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Above output is pretty-json formatted. You can convert it to compact format using ",(0,o.jsx)(n.code,{children:"jq -c ."})," command. You can write a temporary file in pretty-json format and run ",(0,o.jsx)(n.code,{children:"cat <TEMP_VOLUME_META> | jq -c . > volume.meta"})," to convert it to compact format."]}),"\n",(0,o.jsx)(n.h2,{id:"12-missing-metadata-for-img-files",children:"1.2 Missing metadata for img files"}),"\n",(0,o.jsx)(n.p,{children:"To identify, if volume mount is failing because of missing metadata for img files, check logs of longhorn-manager pod using below command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl  logs -l app=longhorn-manager  -n longhorn-system  -c longhorn-manager --prefix=true  --tail=-1  |grep Failed to find metadata for | grep <PV NAME>\n"})}),"\n",(0,o.jsx)(n.p,{children:"For example, if pod is not able to mount volume pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6, then command will be:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'[root@server0 pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-d8b53e98]# kubectl  logs -l app=longhorn-manager  -n longhorn-system  -c longhorn-manager --prefix=true  --tail=-1  |grep "Failed to find metadata for" | grep pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6\n[pod/longhorn-manager-7gdqg/longhorn-manager] time="2023-07-10T17:01:58Z" level=warning msg="pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-e-b1e5c2a1: time=\\"2023-07-10T17:01:53Z\\" level=warning msg=\\"failed to create backend with address tcp://10.42.0.72:10060: failed to open replica 10.42.0.72:10060 from remote: rpc error: code = Unknown desc = Failed to find metadata for volume-snap-uipath-s-72f4bc9f-8554-4282-b90b-ad672ab31f8b.img\\""\n[pod/longhorn-manager-7gdqg/longhorn-manager] time="2023-07-10T17:01:58Z" level=warning msg="pvc-f1830fec-b3b6-40e1-825f-b17930bfdad6-e-b1e5c2a1: time=\\"2023-07-10T17:01:57Z\\" level=warning msg=\\"failed to create backend with address tcp://10.42.0.72:10060: failed to open replica 10.42.0.72:10060 from remote: rpc error: code = Unknown desc = Failed to find metadata for volume-snap-uipath-s-72f4bc9f-8554-4282-b90b-ad672ab31f8b.img\\""\n'})}),"\n",(0,o.jsx)(n.p,{children:"To find relevant replica directory for volume, follow steps from 1.1.1"}),"\n",(0,o.jsx)(n.h3,{id:"121-to-recreate-volume-head-xxximgmeta-file",children:"1.2.1 To recreate volume-head-xxx.img.meta file"}),"\n",(0,o.jsxs)(n.p,{children:["In replica directory, there will be only one ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img"})," data file and one ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img.meta"})," meta file. Name of the meta file will be same as ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img"})," with suffix .meta."]}),"\n",(0,o.jsxs)(n.p,{children:["Format of ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img.meta"}),"file is as below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'{\n  "Name": "volume-head-007.img",\n  "Parent": "volume-snap-1670c0ce-4cee-4bb1-addb-f6d00b03f9f9.img",\n  "Removed": false,\n  "UserCreated": false,\n  "Created": "2023-07-10T10:10:22Z",\n  "Labels": null\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Where,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Name"})," is  volume-head file name. It will be in ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img"})," format. This file contains the data of volume."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Parent"})," is latest snapshot name. To get latest snapshot name, run ",(0,o.jsx)(n.code,{children:"ls -1rth volume-snap*.img | tail -1"})," in replica directory."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Removed"})," defines if this file is removed. For ",(0,o.jsx)(n.code,{children:"volume-head"})," It will be false"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"UserCreated"})," defines if this file is created by use, not longhorn. Value of this field will be false by default."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Created"})," represent creation time-stamp of ",(0,o.jsx)(n.code,{children:"volume-head"})," file. You can set it to timestamp of ",(0,o.jsx)(n.code,{children:"volume-head"})," file"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Labels"})," represent labels of volume-head. Default value for this will be ",(0,o.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Based on above information, To re-construct ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img.meta"})," file, We need Name, Parent and Created values."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["To get Name , run ",(0,o.jsx)(n.code,{children:"ls -1 volume-head-*.img"})," in relevant replica directory."]}),"\n",(0,o.jsxs)(n.li,{children:["To get Parent snapshot name, run ",(0,o.jsx)(n.code,{children:"ls -1rth volume-snap*.img | tail -1"})]}),"\n",(0,o.jsxs)(n.li,{children:["To get Created, run ",(0,o.jsx)(n.code,{children:"date -u -d @"}),"stat -c '%X' volume-head-*.img",(0,o.jsx)(n.code,{children:'   +"%Y-%m-%dT%H:%M:%SZ"'})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Using above information, ",(0,o.jsx)(n.code,{children:"volume-head-xxx.img.meta"})," file for our example volume will be,"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'{\n  "Name": "volume-head-006.img",\n  "Parent": "volume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img",\n  "Removed": false,\n  "UserCreated": false,\n  "Created": "2023-07-10T15:20:08Z",\n  "Labels": null\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Above output is ",(0,o.jsx)(n.code,{children:"pretty-json"})," formatted. You can convert it to compact format using ",(0,o.jsx)(n.code,{children:"jq -c ."})," command. You can write a temporary file in pretty-json format and run ",(0,o.jsx)(n.code,{children:"cat <TEMP_VOLUME_META> | jq -c . > volume-head-xxx.img.meta"})," to convert it to compact format."]}),"\n",(0,o.jsx)(n.h3,{id:"122-to-recreate-volume-snap-xxximgmeta-file",children:"1.2.2 To recreate volume-snap-xxx.img.meta file"}),"\n",(0,o.jsxs)(n.p,{children:["In replica directory, there will be multiple ",(0,o.jsx)(n.code,{children:"volume-snap-xxx.img"})," data files along with its ",(0,o.jsx)(n.code,{children:"volume-snap-xxx.img.meta"})," meta files. Meta file for relevant snapshot file will be having same name with suffix ",(0,o.jsx)(n.code,{children:".meta"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Format of ",(0,o.jsx)(n.code,{children:"volume-snap-xxx.img.meta"})," file is as below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'{\n  "Name": "volume-snap-1670c0ce-4cee-4bb1-addb-f6d00b03f9f9.img",\n  "Parent": "volume-snap-uipath-s-d7594081-20a7-4e85-8975-b4d07e7203df.img",\n  "Removed": true,\n  "UserCreated": false,\n  "Created": "2023-07-10T14:20:22Z",\n  "Labels": null\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Where,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Name"})," is  volume-snap file name. It will be in ",(0,o.jsx)(n.code,{children:"volume-snap-xxx.img"})," format. This file contains the data of snapshot."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Parent"})," is latest snapshot name older than the snapshot we are fixing. To get latest snapshot name older to current one , list snapshot images ",(0,o.jsx)(n.code,{children:"volume-snap-*.img"})," in timestamp order and select the recent older snapshot before the snapshot for which we are fixing the meta file. If there are no any older snapshot then leave Parent field empty."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Removed"})," defines if this file is removed. If Parent field is empty then set Removed as false."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"UserCreated"})," defines if this file is created by use, not longhorn. Value of this field will be true if snapshot is having ",(0,o.jsx)(n.code,{children:"volume-snap-uipath-xx"})," format else false by default"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Created"})," represent creation time-stamp of ",(0,o.jsx)(n.code,{children:"volume-snap-x"})," file. You can set it to timestamp of ",(0,o.jsx)(n.code,{children:"volume-snap-x"})," file"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Labels"})," represent labels of volume-head. Default value for this will be ",(0,o.jsx)(n.code,{children:"null"}),". If snapshot was created by recurring job , i.e uipath-snapshot, then set Labels to ",(0,o.jsx)(n.code,{children:'{"RecurringJob": "uipath-snapshot"}'})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Once you have all above information, you can construct ",(0,o.jsx)(n.code,{children:"volume-snap-xxx.img.meta"})," file as below, compact it and save it."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'{\n  "Name": "volume-snap-uipath-s-239a4ab1-7d53-4427-9ce9-fc0185fbfa77.img",\n  "Parent": "volume-snap-uipath-s-903643d4-f8e0-4f24-8e33-86c7c1680c3d.img",\n  "Removed": false,\n  "UserCreated": true,\n  "Created": "2023-07-10T14:10:04Z",\n  "Labels": {\n    "RecurringJob": "uipath-snapshot"\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Above output is ",(0,o.jsx)(n.code,{children:"pretty-json"})," formatted. You can convert it to compact format using ",(0,o.jsx)(n.code,{children:"jq -c ."})," command. You can write a temporary file in ",(0,o.jsx)(n.code,{children:"pretty-json"})," format and run ",(0,o.jsx)(n.code,{children:"cat <TEMP_VOLUME_META> | jq -c . > volume-snap-xxx.img.meta"})," to convert it to compact format."]}),"\n",(0,o.jsx)(n.h2,{id:"13-mismatch-in-pvc-size",children:"1.3 Mismatch in PVC size"}),"\n",(0,o.jsx)(n.p,{children:"If longhorn volume remains in attaching-detaching state, there might be an issue with PVC size. To confirm, if volume is not able to attach because of PVC size mismatch, run below command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:' kubectl  logs -n longhorn-system -l longhorn.io/instance-manager-type=engine --prefix=true  --tail=-1 |grep "BUG: Backend sizes do not match" |grep <PV_NAME>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Sample output of above command will be as below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'[root@server0 ~]# kubectl  logs -n longhorn-system -l longhorn.io/instance-manager-type=engine --prefix=true  --tail=-1 |grep "BUG: Backend sizes do not match" |grep pvc-f322bf2f-7448-490c-9032-3d337cc5c858\n[pod/instance-manager-e-18648e5c/engine-manager] [pvc-f322bf2f-7448-490c-9032-3d337cc5c858-e-9fa69db1] 2023/07/11 07:21:15 BUG: Backend sizes do not match 2147483648 != 524288000 in the engine initiation phase\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In above example, ",(0,o.jsx)(n.code,{children:"pvc-f322bf2f-7448-490c-9032-3d337cc5c858"})," size is incorrect."]}),"\n",(0,o.jsx)(n.p,{children:"To fix this issue,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Scale down workload pods"}),"\n",(0,o.jsxs)(n.li,{children:["Edit ",(0,o.jsx)(n.code,{children:"volumes.longhorn.io"})," object for relevant PV using command ",(0,o.jsx)(n.code,{children:"kubectl edit volumes.longhorn.io -n longhorn-system <PV_NAME>"})," and make ",(0,o.jsx)(n.code,{children:"spec.nodeID"}),' field empty("").']}),"\n",(0,o.jsxs)(n.li,{children:["Resize PVC object to correct size. To resize, run ",(0,o.jsx)(n.code,{children:"kubectl edit pvc -n <NS> <PVC_NAME> and update spec.resources.requests.storage"})," to correct value."]}),"\n",(0,o.jsxs)(n.li,{children:["Check ",(0,o.jsx)(n.code,{children:"volume.meta"})," file\u2019s content of relevant replica directory. If size is not correct, update the size in ",(0,o.jsx)(n.code,{children:"volume.meta"})," file. Please refer 1.1.1 to fetch replica directory."]}),"\n",(0,o.jsx)(n.li,{children:"Scale up workload pods."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"14-all-replicas-are-faulted",children:"1.4 All replicas are faulted"}),"\n",(0,o.jsx)(n.p,{children:"If longhorn replicas are in faulted state and requires manual salvage then volume may not be able to attach and remain in detach state."}),"\n",(0,o.jsx)(n.p,{children:"To identify if volume requires manual salvage, Run below commands:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'kubectl  logs -l app=longhorn-manager  -n longhorn-system  -c longhorn-manager --prefix=true  --tail=-1  |grep "set engine salvageRequested to true" | grep <PV NAME>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Sample output of above command will be as below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'2023-11-20T18:22:16.667609096+11:00 time="2023-11-20T07:22:16Z" level=info msg="All replicas are failed, set engine salvageRequested to true" accessMode=rwo controller=longhorn-volume frontend=blockdev migratable=false node=rpa-suite-dev-01.it.csiro.au owner=rpa-suite-dev-01.it.csiro.au state=detaching volume=pvc-031fd6bc-9cfe-420a-9213-da38509d733a\n'})}),"\n",(0,o.jsx)(n.p,{children:"To fix this issue,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Scale down workload pods"}),"\n",(0,o.jsxs)(n.li,{children:["Find replicas of relevant volume using command ",(0,o.jsx)(n.code,{children:"kubectl get replicas.longhorn.io -n longhorn-system |grep <PV_NAME>"})]}),"\n",(0,o.jsxs)(n.li,{children:["Edit replicas.longhorn.io object for relevant PV using command ",(0,o.jsx)(n.code,{children:"kubectl edit replicas.longhorn.io -n longhorn-system <REPLICA_NAME>"})," and set ",(0,o.jsx)(n.code,{children:"spec.failedat"}),' field empty("").']}),"\n",(0,o.jsx)(n.li,{children:"Scale up workload pods."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"15-engine-image-is-missing",children:"1.5 Engine image is missing"}),"\n",(0,o.jsx)(n.p,{children:"Longhorn uses engine image to deploy the volume. This engine image is tightly coupled with installed longhorn version, longhorn version 1.3.3 requires engine image 1.3.3 only."}),"\n",(0,o.jsx)(n.p,{children:"Upgrading longhorn doesn\u2019t upgrade engine image to respective version. There are few scenarios in which longhorn may upgrade the engine image, like node reboot, volume detach-attach. But this is not guaranteed as this may leaves few volume with old image."}),"\n",(0,o.jsx)(n.p,{children:"To identify if volume is not able to attach because of this issue, run below command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'kubectl  logs -l app=longhorn-manager  -n longhorn-system  -c longhorn-manager --prefix=true  --tail=-1  |grep "is not deployed on at least one of the the replicas" | grep <PV NAME>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Sample output of above command will be as below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'2023-11-23T13:55:26.306811530Z time="2023-11-23T13:55:26Z" level=warning msg="HTTP handling error unable to attach volume pvc-8aaf3ecd-9812-46ce-9eed-b41a95a08106 to czchols5558.prg-dc.dhl.com: cannot attach volume pvc-8aaf3ecd-9812-46ce-9eed-b41a95a08106 because the engine image longhornio/longhorn-engine:v1.2.2 is not deployed on at least one of the the replicas\' nodes or the node that the volume is going to attach to"\n'})}),"\n",(0,o.jsx)(n.p,{children:"To fix this issue,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Scale down workload pods"}),"\n",(0,o.jsx)(n.li,{children:"Open errored volume in longhorn UI and select upgrade engine, choose latest available engine image."}),"\n",(0,o.jsx)(n.li,{children:"Scale up workload pods"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If there are number of volumes running into this issue, you can run below script which will upgrade all the volumes to the given version ",(0,o.jsx)(n.a,{target:"_blank",href:i(2820).Z+"",children:"longhorn_engines_upgrade.sh"})]}),"\n",(0,o.jsxs)(n.p,{children:["Note: If there are already volumes which are not being able to attach then uncomment ",(0,o.jsx)(n.code,{children:"ENABLE BELOW RETURN"})," block and run the script."]}),"\n",(0,o.jsx)(n.p,{children:"In case of offline installation, if old engine image doesn\u2019t exist in docker-registry then above script or manual upgrade from UI will fail. Before upgrading to latest version, You need to seed old engine image to docker-registry."}),"\n",(0,o.jsx)(n.h2,{id:"16-corrupted-meta-files-from-replica-directory",children:"1.6 Corrupted meta files from replica directory"}),"\n",(0,o.jsx)(n.p,{children:"Similar to section 1.2"}),"\n",(0,o.jsx)(n.h2,{id:"17-pod-fails-to-come-up-after-node-reboot-due-to-filesystem-corruption",children:"1.7 Pod fails to come up after node reboot due to filesystem corruption"}),"\n",(0,o.jsx)(n.p,{children:"Sometimes when host gets rebooted the insights-insightslooker pod fails to come up due to volume attachment issue. When this happens the insights app gets stuck in progressing state"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"LonghornVolumeStuck",src:i(6431).Z+"",width:"1520",height:"640"})}),"\n",(0,o.jsx)(n.p,{children:"Go the insights-insightslooker pod in argocd ui, the events for the pod should show error message like below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"LonghornFailedMount",src:i(308).Z+"",width:"1195",height:"234"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Identify the volume from the above message here its ",(0,o.jsx)(n.code,{children:"pvc-5abe3c8f-7422-44da-9132-92be5641150a"})]}),"\n",(0,o.jsxs)(n.li,{children:["Scale down the workload which using the errored volume. Ensure that volume is detached from the node. You can check output of ",(0,o.jsx)(n.code,{children:"kubectl get volumes.longhorn.io -n longhorn-system |grep <PV>"})," to verify volume is detached."]}),"\n",(0,o.jsx)(n.li,{children:"Manually attach the errored volume to any node from longhorn UI."}),"\n",(0,o.jsx)(n.li,{children:"Login to the node and fix the device corresponding to that volume."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"fsck.ext4 /dev/longhorn/<ERRORED_VOLUME>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Example:\n",(0,o.jsx)(n.img,{alt:"LonghornFSCK",src:i(7361).Z+"",width:"1520",height:"778"})]}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsx)(n.li,{children:"Once errored volume is repaired, detach it from the node. This can be done from longhorn UI."}),"\n",(0,o.jsx)(n.li,{children:"Scale up the workload."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The pod should come up automatically and after sometime the pod becomes healthy."})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2820:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/files/longhorn-upgrade-engines-899526a394ed4e7e58c80836ada40bdc.sh"},308:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/longhorn-failed-mount-event-aae8e8a8cb9818aa2fb69497a632f690.png"},7361:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/longhorn-fsck-36c595005b9ba78c0fec148ee021e9ff.png"},6431:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/longhorn-insights-stuck-6f69c20e6d366df3c3d06763d65116be.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>s});var o=i(7294);const l={},r=o.createContext(l);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);